Student Information System (SIS)

Implement OOPs
A Student Information System (SIS) manages information about students, courses, student enrollments, teachers, and payments. Each student can enroll in multiple courses, each course can have multiple students, each course is taught by a teacher, and students make payments for their courses. Students have attributes such as name, date of birth, email, and phone number. Courses have attributes such as course name, course code, and instructor name. Enrollments track which students are enrolled in which courses. Teachers have attributes such as names and email. Payments track the amount and date of payments made by students.

Task 1: Define Classes
Define the following classes based on the domain description:
Student class with the following attributes:
•	Student ID
•	First Name
•	Last Name
•	Date of Birth
•	Email
•	Phone Number
Course class with the following attributes:
•	Course ID
•	Course Name
•	Course Code
•	Instructor Name
Enrollment class to represent the relationship between students and courses. It should have attributes:
•	Enrollment ID
•	Student ID (reference to a Student)
•	Course ID (reference to a Course)
•	Enrollment Date
Teacher class with the following attributes:
•	Teacher ID
•	First Name
•	Last Name
•	Email
Payment class with the following attributes:
•	Payment ID
•	Student ID (reference to a Student)
•	Amount
•	Payment Date

Task 2: Implement Constructors
Implement constructors for each class to initialize their attributes. Constructors are special methods that are called when an object of a class is created. They are used to set initial values for the attributes of the class. Below are detailed instructions on how to implement constructors for each class in your Student Information System (SIS) assignment:

Student Class Constructor
In the Student class, you need to create a constructor that initializes the attributes of a student when an instance of the Student class is created

SIS Class Constructor
If you have a class that represents the Student Information System itself (e.g., SIS class), you may also implement a constructor for it. This constructor can be used to set up any initial configuration for the SIS.
Repeat the above process for each class Course, Enrollment, Teacher, Payment by defining constructors that initialize their respective attributes.

Task 3: Implement Methods
Implement methods in your classes to perform various operations related to the Student Information System (SIS). These methods will allow you to interact with and manipulate data within your system. Below are detailed instructions on how to implement methods in each class:
Implement the following methods in the appropriate classes:

Student Class:
•	EnrollInCourse(course: Course): Enrolls the student in a course.
•	UpdateStudentInfo(firstName: string, lastName: string, dateOfBirth: DateTime, email: string, phoneNumber: string): Updates the student's information.
•	MakePayment(amount: decimal, paymentDate: DateTime): Records a payment made by the student.
•	DisplayStudentInfo(): Displays detailed information about the student.
•	GetEnrolledCourses(): Retrieves a list of courses in which the student is enrolled.
•	GetPaymentHistory(): Retrieves a list of payment records for the student.

Course Class:
•	AssignTeacher(teacher: Teacher): Assigns a teacher to the course.
•	UpdateCourseInfo(courseCode: string, courseName: string, instructor: string): Updates course information.
•	DisplayCourseInfo(): Displays detailed information about the course.
•	GetEnrollments(): Retrieves a list of student enrollments for the course.
•	GetTeacher(): Retrieves the assigned teacher for the course.

Enrollment Class:
•	GetStudent(): Retrieves the student associated with the enrollment.
•	GetCourse(): Retrieves the course associated with the enrollment.

Teacher Class:
•	UpdateTeacherInfo(name: string, email: string, expertise: string): Updates teacher information.
•	DisplayTeacherInfo(): Displays detailed information about the teacher.
•	GetAssignedCourses(): Retrieves a list of courses assigned to the teacher.

Payment Class:
•	GetStudent(): Retrieves the student associated with the payment.
•	GetPaymentAmount(): Retrieves the payment amount.
•	GetPaymentDate(): Retrieves the payment date.

SIS Class (if you have one to manage interactions):
•	EnrollStudentInCourse(student: Student, course: Course): Enrolls a student in a course.
•	AssignTeacherToCourse(teacher: Teacher, course: Course): Assigns a teacher to a course.
•	RecordPayment(student: Student, amount: decimal, paymentDate: DateTime): Records a payment made by a student.
•	GenerateEnrollmentReport(course: Course): Generates a report of students enrolled in a specific course.
•	GeneratePaymentReport(student: Student): Generates a report of payments made by a specific student.
•	CalculateCourseStatistics(course: Course): Calculates statistics for a specific course, such as the number of enrollments and total payments.

Use the Methods
In your driver program or any part of your code where you want to perform actions related to the Student Information System, create instances of your classes, and use the methods you've implemented.
Repeat this process for using other methods you've implemented in your classes and the SIS class.

Task 4: Exceptions handling and Custom Exceptions
Implementing custom exceptions allows you to define and throw exceptions tailored to specific situations or business logic requirements.

Create Custom Exception Classes
You'll need to create custom exception classes that are inherited from the System.Exception class or one of its derived classes (e.g., System.ApplicationException). These custom exception classes will allow you to encapsulate specific error scenarios and provide meaningful error messages.

Throw Custom Exceptions
In your code, you can throw custom exceptions when specific conditions or business logic rules are violated. To throw a custom exception, use the throw keyword followed by an instance of your custom exception class.
•	DuplicateEnrollmentException: Thrown when a student is already enrolled in a course and tries to enroll again. This exception can be used in the EnrollStudentInCourse method.
•	CourseNotFoundException: Thrown when a course does not exist in the system, and you attempt to perform operations on it (e.g., enrolling a student or assigning a teacher).
•	StudentNotFoundException: Thrown when a student does not exist in the system, and you attempt to perform operations on the student (e.g., enrolling in a course, making a payment).
•	TeacherNotFoundException: Thrown when a teacher does not exist in the system, and you attempt to assign them to a course.
•	PaymentValidationException: Thrown when there is an issue with payment validation, such as an invalid payment amount or payment date.
•	InvalidStudentDataException: Thrown when data provided for creating or updating a student is invalid (e.g., invalid date of birth or email format).
•	InvalidCourseDataException: Thrown when data provided for creating or updating a course is invalid (e.g., invalid course code or instructor name).
•	InvalidEnrollmentDataException: Thrown when data provided for creating an enrollment is invalid (e.g., missing student or course references).
•	InvalidTeacherDataException: Thrown when data provided for creating or updating a teacher is invalid (e.g., missing name or email).
•	InsufficientFundsException: Thrown when a student attempts to enroll in a course but does not have enough funds to make the payment.

Task 5: Collections Implement Collections:
Implement relationships between classes using appropriate data structures (e.g., lists or dictionaries) to maintain associations between students, courses, enrollments, teachers, and payments.
These relationships are essential for the Student Information System (SIS) to track and manage student enrollments, teacher assignments, and payments accurately.

Define Class-Level Data Structures
You will need class-level data structures within each class to maintain relationships. Here's how to define them for each class:

Student Class:
Create a list or collection property to store the student's enrollments. This property will hold references to Enrollment objects.
Example: List<Enrollment> Enrollments { get; set; }

Course Class:
Create a list or collection property to store the course's enrollments. This property will hold references to Enrollment objects.
Example: List<Enrollment> Enrollments { get; set; }

Enrollment Class:
Include properties to hold references to both the Student and Course objects. Example: Student Student { get; set; } and Course Course { get; set; }

Teacher Class:
Create a list or collection property to store the teacher's assigned courses. This property will hold references to Course objects.
Example: List<Course> AssignedCourses { get; set; }

Payment Class:
Include a property to hold a reference to the Student object. Example: Student Student { get; set; }

Update Constructor(s)
In the constructors of your classes, initialize the list or collection properties to create empty collections when an object is instantiated.
Repeat this for the Course, Teacher, and Payment classes, where applicable.

Task 6: Create Methods for Managing Relationships
To add, remove, or retrieve related objects, you should create methods within your SIS class or each relevant class.
•	AddEnrollment(student, course, enrollmentDate): In the SIS class, create a method that adds an enrollment to both the Student's and Course's enrollment lists. Ensure the Enrollment object references the correct Student and Course.
•	AssignCourseToTeacher(course, teacher): In the SIS class, create a method to assign a course to a teacher. Add the course to the teacher's AssignedCourses list.
•	AddPayment(student, amount, paymentDate): In the SIS class, create a method that adds a payment to the Student's payment history. Ensure the Payment object references the correct Student.
•	GetEnrollmentsForStudent(student): In the SIS class, create a method to retrieve all enrollments for a specific student.
•	GetCoursesForTeacher(teacher): In the SIS class, create a method to retrieve all courses assigned to a specific teacher.

Create a Driver Program
A driver program (also known as a test program or main program) is essential for testing and demonstrating the functionality of your classes and methods within your Student Information System (SIS) assignment. In this task, you will create a console application that serves as the entry point for your SIS and allows you to interact with and test your implemented classes and methods.

Add References to Your SIS Classes
Ensure that your SIS classes (Student, Course, Enrollment, Teacher, Payment) and the SIS class (if you have one to manage interactions) are defined in separate files within your project or are referenced properly.
If you have defined these classes in separate files, make sure to include using statements in your driver program to access them:

Implement the Main Method
In the console application, the Main method serves as the entry point for your program. This is where you will create instances of your classes, call methods, and interact with your Student Information System.
In the Main method, you create instances of your classes (e.g., Student, Course, and SIS) and then interact with your Student Information System by calling methods and handling exceptions.

Task 7: Database Connectivity

Database Initialization:
Implement a method that initializes a database connection and creates tables for storing student, course, enrollment, teacher, and payment information. Create SQL scripts or use code-first migration to create tables with appropriate schemas for your SIS.

Data Retrieval:
Implement methods to retrieve data from the database. Users should be able to request information about students, courses, enrollments, teachers, or payments. Ensure that the data retrieval methods handle exceptions and edge cases gracefully.

Data Insertion and Updating:
Implement methods to insert new data (e.g., enrollments, payments) into the database and update existing data (e.g., student information). Use methods to perform data insertion and updating.
Implement validation checks to ensure data integrity and handle any errors during these operations.

Transaction Management:
Implement methods for handling database transactions when enrolling students, assigning teachers, or recording payments. Transactions should be atomic and maintain data integrity. Use database transactions to ensure that multiple related operations either all succeed or all fail. Implement error handling and rollback mechanisms in case of transaction failures.

Dynamic Query Builder:
Implement a dynamic query builder that allows users to construct and execute custom SQL queries to retrieve specific data from the database. Users should be able to specify columns, conditions, and sorting criteria. Create a query builder method that dynamically generates SQL queries based on user input. Implement parameterization and sanitation of user inputs to prevent SQL injection.

Task 8: Student Enrollment
In this task, a new student, John Doe, is enrolling in the SIS. The system needs to record John's information, including his personal details, and enroll him in a few courses. Database connectivity is required to store this information.
John Doe's details:
•	First Name: John
•	Last Name: Doe
•	Date of Birth: 1995-08-15
•	Email: john.doe@example.com
•	Phone Number: 123-456-7890 John is enrolling in the following courses:
•	Course 1: Introduction to Programming
•	Course 2: Mathematics 101
The system should perform the following tasks:
•	Create a new student record in the database.
•	Enroll John in the specified courses by creating enrollment records in the database.

Task 9: Teacher Assignment
In this task, a new teacher, Sarah Smith, is assigned to teach a course. The system needs to update the course record to reflect the teacher assignment.
Teacher's Details:
•	Name: Sarah Smith
•	Email: sarah.smith@example.com
•	Expertise: Computer Science Course to be assigned:
•	Course Name: Advanced Database Management
•	Course Code: CS302
The system should perform the following tasks:
•	Retrieve the course record from the database based on the course code.
•	Assign Sarah Smith as the instructor for the course.
•	Update the course record in the database with the new instructor information.

Task 10: Payment Record
In this task, a student, Jane Johnson, makes a payment for her enrolled courses. The system needs to record this payment in the database.
Jane Johnson's details:
•	Student ID: 101
•	Payment Amount: $500.00
•	Payment Date: 2023-04-10
The system should perform the following tasks:
•	Retrieve Jane Johnson's student record from the database based on her student ID.
•	Record the payment information in the database, associating it with Jane's student record.
•	Update Jane's outstanding balance in the database based on the payment amount.

Task 11: Enrollment Report Generation
In this task, an administrator requests an enrollment report for a specific course, "Computer Science 101." The system needs to retrieve enrollment information from the database and generate a report.
Course to generate the report for:
•	Course Name: Computer Science 101 The system should perform the following tasks:
•	Retrieve enrollment records from the database for the specified course.
•	Generate an enrollment report listing all students enrolled in Computer Science 101.
Display or save the report for the administrator

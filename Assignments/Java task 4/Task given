Task 4: Exceptions handling and Custom Exceptions 

Implementing custom exceptions allows you to define and throw exceptions tailored to specific 
situations or business logic requirements. 

Create Custom Exception Classes 

You'll need to create custom exception classes that are inherited from the System.Exception class or one 
of its derived classes (e.g., System.ApplicationException). These custom exception classes will allow you 
to encapsulate specific error scenarios and provide meaningful error messages. 

Throw Custom Exceptions

In your code, you can throw custom exceptions when specific conditions or business logic rules are 
violated. To throw a custom exception, use the throw keyword followed by an instance of your custom 
exception class. 

• DuplicateEnrollmentException: Thrown when a student is already enrolled in a course and tries 
to enroll again. This exception can be used in the EnrollStudentInCourse method. 

• CourseNotFoundException: Thrown when a course does not exist in the system, and you 
attempt to perform operations on it (e.g., enrolling a student or assigning a teacher).

• StudentNotFoundException: Thrown when a student does not exist in the system, and you 
attempt to perform operations on the student (e.g., enrolling in a course, making a payment). 

• TeacherNotFoundException: Thrown when a teacher does not exist in the system, and you 
attempt to assign them to a course. 

• PaymentValidationException: Thrown when there is an issue with payment validation, such as 
an invalid payment amount or payment date. 

• InvalidStudentDataException: Thrown when data provided for creating or updating a student is 
invalid (e.g., invalid date of birth or email format). 

• InvalidCourseDataException: Thrown when data provided for creating or updating a course is 
invalid (e.g., invalid course code or instructor name). 

• InvalidEnrollmentDataException: Thrown when data provided for creating an enrollment is 
invalid (e.g., missing student or course references).

• InvalidTeacherDataException: Thrown when data provided for creating or updating a teacher is 
invalid (e.g., missing name or email). 

• InsufficientFundsException: Thrown when a student attempts to enroll in a course but does not 
have enough funds to make the payment. 
